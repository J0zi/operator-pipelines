---
name: E2E-CI

on:  # yamllint disable-line rule:truthy
  push:
    branches:
      - main
      - ISV-890
  pull_request:
  workflow_dispatch:
jobs:

  # envs  for other jobs are prepared as outputs of this task. Outputs are a good way to
  # concatenate strings and use them as values to keywords other than "run".
  # For run, they can be used with keyword "env".
  prepare-env-job:
    runs-on: ubuntu-latest
    outputs:
      short_sha: ${{ steps.prepare.outputs.short_sha }}
      pr_title: ${{ steps.prepare.outputs.pr_title }}
      oc_project: ${{ steps.prepare.outputs.oc_project }}
    steps:
      - id: prepare
        run: |
          echo "::set-output name=short_sha::${GITHUB_SHA::7}"
          echo "::set-output name=pr_title::operator test-e2e-operator (0.0.7-${GITHUB_SHA::7})"
          echo "::set-output name=oc_project::test-e2e-${GITHUB_SHA::7}"
          echo "::set-output name=test_pr_base_branch::${GITHUB_SHA::7}-base"

  # Create a Pull Request with the fake version of fake operator in the repository operator-pipelines-test.
  # Pipelines will run against this PR.
  prepare-test-data:
    runs-on: ubuntu-latest
    needs: prepare-env-job
    outputs:
      test_pr_number: ${{ steps.get_pr_data.outputs.pr_number }}
      test_pr_head_sha: ${{ steps.get_pr_data.outputs.pr_head_sha }}
    env:
      SHORT_SHA: ${{needs.prepare-env-job.outputs.short_sha}}
      PR_BASE_BRANCH: ${{needs.prepare-env-job.outputs.test_pr_base_branch}}
      # This env is needed for hub cli
      GITHUB_TOKEN: ${{ secrets.BOT_TOKEN }}
    steps:
      # Clone repository operator-pipelines-test on branch e2e-test-operator
      - uses: actions/checkout@v2
        with:
          repository: 'redhat-openshift-ecosystem/operator-pipelines-test'
          ref: 'e2e-test-operator'

      - name: Prepare environment
        run: |
          # Install dependencies- GitHub client
          sudo apt install -y hub

      # Create test branch as copy of main. This branch will be base for
      # created test PR
      - name: Create test branch
        run: |
          echo "Creating branch $SHORT_SHA-merge as copy of main"
          git branch -c main ${PR_BASE_BRANCH}

      # Create commit with changes used for E2E tests. This commit contains the `test-e2e-operator`
      # from branch e2e-test-operator- just with the new version.
      - name: Create commit to create PR with test data
        run: |
          git config user.name 'rh-operator-bundle-bot'
          git config user.email 'exd-guild-isv+operators@redhat.com'

          # Remove all of previously merged test operators, if there are any.
          # If something will go wrong with the test branch, backup is on branch e2e-test-operator-backup

          rm -rf 0.0.7-*
          # Commit and push, if anything was removed.
          git commit -am "removing previously merged operator" && git push || true

          cd operators/test-e2e-operator
          cp 0.0.7 0.0.7-$SHORT_SHA
          cd 0.0.7-$SHORT_SHA
          find ./ -type f -exec sed -i "s/0.0.7/0.0.7-$SHORT_SHA/g" {} \;
          git commit -am "new version of operator"

      # Create PR.
      - name: Create Pull Request
        uses: peter-evans/create-pull-request@v3
        with:
          token: ${{ secrets.BOT_TOKEN }}
          author: 'rh-operator-bundle-bot <exd-guild-isv+operators@redhat.com>'
          commit-message: 'Preparing the data for E2E tests'
          base: ${{needs.prepare-env-job.outputs.test_pr_base_branch}}
          branch: ${{needs.prepare-env-job.outputs.short_sha}}
          title: ${{needs.prepare-env-job.outputs.pr_title}}
          delete-branch: true
          body: 'This is PR used for E2E tests of the operator pipelines'

      # Get the number of the created PR- it's used for cleanup
      - id: get_pr_data
        run: |
          PR_NUMBER=$(hub pr show -f "%I")
          PR_HEAD_SHA=$(hub pr show -f "%sH")
          echo "::set-output name=pr_number::${PR_NUMBER}"
          echo "::set-output name=pr_head_sha::${PR_HEAD_SHA}"


  # Deploy and run the E2E tests
  run-e2e:
    runs-on: ubuntu-latest
    needs:
      - prepare-env-job
      - prepare-test-data
    env:
      SHORT_SHA: ${{needs.prepare-env-job.outputs.short_sha}}
      OC_PROJECT: ${{needs.prepare-env-job.outputs.oc_project}}
    steps:
      # Clone repo
      - uses: actions/checkout@v1

      - name: Prepare environment
        run: |
          # Install dependencies
          pip install --user openshift

          # Install tkn cli
          curl -LO https://github.com/tektoncd/cli/releases/download/v0.21.0/tkn_0.21.0_Linux_x86_64.tar.gz
          tar xvzf tkn_0.21.0_Linux_x86_64.tar.gz -C /usr/local/bin/

          # Prepare Kubeconfig.
          # Use GitHub secret which contains the Kubeconfig for SA with admin privilleges (same as in ansible vault)
          # to create Kubernetes context.
          mkdir $HOME/.kube
          cat <<EOF > $HOME/.kube/config
          ${{ secrets.KUBECONFIG }}
          EOF

          # Prepare vault password
          echo ${{ secrets.VAULT_PASSWORD }} > ansible/vault-password

      - name: Deploy e2e environment
        # Default timeout is 2 min
        timeout-minutes: 5
        run: |
          oc new-project $OC_PROJECT
          pushd ansible
          bash init-custom-env.sh $OC_PROJECT stage vault-password
          popd

      #- name: Run CI pipeline
      #  run: |
      #    tkn pipeline start operator-ci-pipeline \
      #      --use-param-defaults \
      #      --param git_repo_url=git@github.com:redhat-openshift-ecosystem/operator-pipelines-test.git \
      #      --param git_branch=$SHORT_SHA \
      #      --param bundle_path=operators/test-e2e-operator/0.0.7-$SHORT_SHA \
      #      --param env=stage \
      #      --workspace name=pipeline,volumeClaimTemplateFile=templates/workspace-template.yml \
      #      --workspace name=kubeconfig,secret=kubeconfig \
      #      --workspace name=ssh-dir,secret=github-ssh-credentials \
      #      --workspace name=pyxis-api-key,secret=pyxis-api-secret \
      #      --showlog

      #- name: Check if CI pipeline passed
      #  run: |
      #    PIPELINERUN_NAME=$(oc get pr -l tekton.dev/pipeline=operator-ci-pipeline --no-headers -o custom-columns=":metadata.name")
      #    PIPELINERUN_SUCCEEDED=$(oc get pr $PIPELINERUN_NAME -o jsonpath={'.status.conditions[].status'})
      #    if [[ "$PIPELINERUN_SUCCEEDED" != "True" ]]; then
      #      oc get pr
      #      exit 1
      #    fi

      - name: Run Hosted pipeline
        run: |
          tkn pipeline start operator-hosted-pipeline \
            --use-param-defaults \
            --param git_pr_branch=$SHORT_SHA \
            --param git_pr_title="${{needs.prepare-env-job.outputs.pr_title}}" \
            --param git_pr_url=https://github.com/redhat-openshift-ecosystem/operator-pipelines-test/pull/${{needs.prepare-test-data.outputs.test_pr_number}} \
            --param git_fork_url=https://github.com/redhat-openshift-ecosystem/operator-pipelines-test.git \
            --param git_repo_url=https://github.com/redhat-openshift-ecosystem/operator-pipelines-test.git \
            --param git_username=rh-operator-bundle-bot \
            --param git_commit=${{needs.prepare-test-data.outputs.test_pr_head_sha}} \
            --param git_base_branch=main \
            --param pr_head_label=$SHORT_SHA \
            --param env=stage \
            --param preflight_min_version=0.0.0 \
            --param ci_min_version=0.0.0 \
            --workspace name=repository,volumeClaimTemplateFile=templates/workspace-template-small.yml \
            --workspace name=results,volumeClaimTemplateFile=templates/workspace-template.yml \
            --workspace name=registry-credentials-all,volumeClaimTemplateFile=templates/workspace-template-small.yml \
            --workspace name=registry-credentials,secret=registry-dockerconfig-secret \
            --workspace name=pyxis-ssl-credentials,secret=operator-pipeline-api-certs \
            --workspace name=prow-kubeconfig,secret=prow-kubeconfig \
            --workspace name=preflight-decryption-key,secret=preflight-decryption-key \
            --workspace name=hydra-credentials,secret=hydra-credentials \
            --workspace name=gpg-key,secret=isv-gpg-key \
            --showlog

      - name: Check if Hosted pipeline passed
        run: |
          PIPELINERUN_NAME=$(oc get pr --no-headers -l tekton.dev/pipeline=operator-ci-pipeline -o custom-columns=":metadata.name")
          PIPELINERUN_SUCCEEDED=$(oc get pr $PIPELINERUN_NAME -o jsonpath={'.status.conditions[].status'})
          if [[ "$PIPELINERUN_SUCCEEDED" != "True" ]]; then
            oc get pr
            exit 1
          fi

  cleanup:
    runs-on: ubuntu-latest
    if: ${{ always() }}
    needs:
      - run-e2e
      - prepare-env-job
      - prepare-test-data
    env:
      OC_PROJECT: ${{needs.prepare-env-job.outputs.oc_project}}
    steps:
      - name: Clean OC project
        if: always()
        run: |

          echo $OC_PROJECT

          # Prepare Kubeconfig.
          # Use GitHub secret which contains the Kubeconfig for SA with admin privilleges (same as in ansible vault)
          # to create Kubernetes context.
          mkdir $HOME/.kube
          cat <<EOF > $HOME/.kube/config
          ${{ secrets.KUBECONFIG }}
          EOF

          oc delete project $OC_PROJECT

      # Deleting the branches associated with the PR will also close the PR- if it still exists
      - name: Clean test branches
        if: always()
        uses: dawidd6/action-delete-branch@v3
        with:
          github_token: ${{ secrets.BOT_TOKEN }}
          owner: redhat-openshift-ecosystem
          repository: operator-pipelines-test
          branches: ${{needs.prepare-env-job.outputs.test_pr_base_branch}}
          soft_fail: true
