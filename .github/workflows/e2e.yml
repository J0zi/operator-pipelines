---
name: E2E-CI

on:  # yamllint disable-line rule:truthy
  push:
    branches:
      - main
      - ISV-1320
  pull_request:
  workflow_dispatch:
jobs:
  prepare-test-data:
    runs-on: ubuntu-latest
    environment:
      name: dev
    steps:
      - name: Set environmental variables
        run: |
          echo "SHORT_SHA=`git rev-parse --short HEAD`" >> $GITHUB_ENV
          echo 'PR_TITLE="operator test-e2e-operator (0.0.7-${SHORT_SHA})"'
      - uses: actions/checkout@v2
        with:
          repository: 'redhat-openshift-ecosystem/operator-pipelines-test'
          ref: 'e2e-test-operator'
      - name: Create commit to create PR with test data
        run: |
          git config user.name 'rh-operator-bundle-bot'
          git config user.email 'exd-guild-isv+operators@redhat.com'

          cd operators/test-e2e-operator
          mv 0.0.7 0.0.7-$SHORT_SHA
          find ./ -type f -exec sed -i "s/0.0.7/0.0.7-$SHORT_SHA/g" {} \;
          git commit -am "new version of operator"
      - name: Create Pull Request
        uses: peter-evans/create-pull-request@v3
        with:
          token: ${{ secrets.BOT_TOKEN }}
          author: 'rh-operator-bundle-bot <exd-guild-isv+operators@redhat.com>'
          commit-message: 'Preparing the data for E2E tests'
          branch: ${{ SHORT_SHA }}
          title: ${{ PR_TITLE }}
          delete-branch: true
          body: 'This is PR used for E2E tests of the operator pipelines'
  run-e2e:
    runs-on: ubuntu-latest
    environment:
      name: dev
    steps:
      - name: Set environmental variables
        run: |
          echo "SHORT_SHA=`git rev-parse --short HEAD`" >> $GITHUB_ENV
          echo 'PR_TITLE="operator test-e2e-operator (0.0.7-${SHORT_SHA})"'
          echo "OC_PROJECT=test-e2e-${SHORT_SHA}" >> $GITHUB_ENV
      - uses: actions/checkout@v1
      - name: Prepare environment
        run: |
          # Install dependencies
          pip install --user openshift

          # Install tkn cli
          curl -LO https://github.com/tektoncd/cli/releases/download/v0.21.0/tkn_0.21.0_Linux_x86_64.tar.gz
          tar xvzf tkn_0.21.0_Linux_x86_64.tar.gz -C /usr/local/bin/

          # Prepare Kubeconfig.
          # Use GitHub secret which contains the Kubeconfig for SA with admin privilleges (same as in ansible vault)
          # to create Kubernetes context.
          mkdir $HOME/.kube
          cat <<EOF > $HOME/.kube/config
          ${{ secrets.KUBECONFIG }}
          EOF

          # Prepare vault password
          echo ${{ secrets.VAULT_PASSWORD }} > ansible/vault-password
      - name: Deploy e2e environment
        # Default timeout is 2 min
        timeout-minutes: 5
        run: |
          oc new-project $OC_PROJECT
          pushd ansible
          bash init-custom-env.sh $OC_PROJECT stage vault-password
          popd
      - name: Run CI pipeline
        run: |
          tkn pipeline start operator-ci-pipeline \
            --use-param-defaults \
            --param git_repo_url=git@github.com:redhat-openshift-ecosystem/operator-pipelines-test.git \
            --param git_branch=$SHORT_SHA \
            --param bundle_path=operators/test-e2e-operator/0.0.7-$SHORT_SHA \
            --param env=stage \
            --workspace name=pipeline,volumeClaimTemplateFile=templates/workspace-template.yml \
            --workspace name=kubeconfig,secret=kubeconfig \
            --workspace name=ssh-dir,secret=github-ssh-credentials \
            --workspace name=pyxis-api-key,secret=pyxis-api-secret \
            --showlog
      - name: Check if pipeline passed
        run: |
          PIPELINERUN_NAME=$(oc get pr --no-headers -o custom-columns=":metadata.name")
          PIPELINERUN_SUCCEEDED=$(oc get pr $PIPELINERUN_NAME -o jsonpath={'.status.conditions[].status'})
          if [[ "$PIPELINERUN_SUCCEEDED" != "True" ]]; then
            oc get pr
            exit 1
          fi
      - name: Cleanup
        if: always()
        run: |
          oc delete project $OC_PROJECT
